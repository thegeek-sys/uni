import os
import testlib
from ddt import ddt, data, unpack

# change this variable to True to disable timeout and enable print
DEBUG = True
DEBUG = False

TIMEOUT = 2 #* 2 # VM warp factor

import images


@ddt
class Test(testlib.TestCase):

    def do_test(self, test, tile_size, expected, folder='tests'):
        puzzle_image = f'{folder}/test{test:02}_in.png'
        plain_image = f'{folder}/test{test:02}_exp.png'
        enc_file = f'{folder}/test{test:02}_enc.txt'
        out_file = f'output/{folder}_{test:02}_out.txt'
        plain_file = f'{folder}/test{test:02}_plain.txt'
        os.makedirs('output', exist_ok=True)
        if DEBUG:
            import program01 as program
            result = program.jigsaw(puzzle_image, plain_image, tile_size, enc_file, out_file)
        else:
            with   self.ignored_function('pprint.pprint'), \
                   self.forbidden_function('builtins.input'), \
                   self.forbidden_function('builtins.eval'), \
                   self.forbidden_function('os.open'), \
                   self.forbidden_function('os.system'), \
                   self.check_imports(allowed=['program01', '_io','typing', 'images','encodings.utf_8','builtins']), \
                   self.check_open({puzzle_image:'rb',plain_image:'rb',enc_file:'rtr',out_file:'twtat'}), \
                   self.timeout(TIMEOUT), \
                   self.timer(TIMEOUT):
                import program01 as program
                result = program.jigsaw(puzzle_image, plain_image, tile_size, enc_file, out_file)
        self.assertEqual(result, expected,
                         f"\n{'*'*10} Decryption Keys differ!! Le chiavi di decifratura non coincitono!!{'*'*10}\n"
                         f"{'*'*10} Returned {result} expected {expected} {'*'*10}")
        self.check_text_file(plain_file, out_file)
        return 1

    def test_intricacy(self):
        self.check_max_ciclomatic_complexity()

    def test_untampered_types(self):
        #    jigsaw(puzzle_image: str, plain_image: str, tile_size:int, encrypted_file: str, plain_file: str)
        tipi = { 'jigsaw': {
                        'puzzle_image': str, 
                        'plain_image': str,
                        'tile_size': int, 
                        'encrypted_file': str, 
                        'plain_file': str, 
                        'return': list[str]} 
              }
        self.check_types_present(tipi)

    def test_no_globals_or_mutable_args(self):
        import program01 as program
        'check that there is no global keyword in the program'
        self.check_no_global_keyword('program01.py')
        'check that there are no mutable global variables'
        self.check_no_mutable_globals(program)
        'check that there are no class variables'
        self.check_no_class_variables(program)
        'check that there are no mutable defaults in functions or methods'
        self.check_no_mutable_defaults(program)
            
    @data(
        (1, 20, ['LFR', 'NFF', 'FNR']),
        (2, 4, ['NNNNNRRFNNFRLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFLRFNNNNNNNNNNN', 'NNNLNNNNNNNNLFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNRNNNNNNNNNNN', 'NNFNNNFRRFRLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN', 'NRRNNRNNNNNNFLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRNNRNNNNNNNNNNN', 'NNNLNNNNNNNNLRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNN', 'FNNRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNN', 'FNFNNNNNNNNNNNNNNNNNNRLNRRFNNNNNLLFLNLRNNNNNFFNNRRNFNFNNFNNRLNFFRNNN', 'LNLNNNNNNNNNNNNNNNNLRNNNNNRFNNNLLNNNNNFLNNNNNNNNNNFNFRNNRNLFNNNNNFNN', 'FNRNNNNNFNNNNNNNNNNRNNNRFRNFFNNLNFRRFNNLFNFNNNRNFNNNRFNNNFNNRRFFLNRN', 'LNLNNNNNNNNNNNNNFNLNFRNNNFNNRNNNFNNNNLFNRNNNLLNNNFNNRRNNFFNNLNNRRNFL', 'LNRLNNNNFLNRFFRNRFFNFNNNNNRNFRLNLNNNNNLNFFNNNNNNNRRNRNNNLNNLLRFNNNNN', 'FNNLNNNNNNNNNNNNLNNNFNNNNNRNRFNNRNNNNNFNNNNNNNNNNNRNRRNNLLNLNFNLRNRN', 'RFNRFNNNNNNNNFNNFFNNRNNNNNNNNFNNFNNNNNNNLRNNNNNNNNLNRNNNFFNNNNRFNNNN', 'NRNNLRNNNNNNRFNLFFNNRNNNNFFNFRFNFNNNNLFNRLLNFNNNNFLNLLNNNLNNNNNNNRRN', 'NNNNNLNNNLLFFNFFNNRNNNLNLFNRRNNNNNFNLRNRRNNNNRFNNFNNLLNNNLLNRLNFLFRL', 'NNLLLNNNNNNNNRFNNNNNNNLNFNNLNNNFNNFFRNNLNNRNNNNFFNNNFNNNNNFLNLLLNNNL', 'NNNNLFRNNNNRFNNNNNNNRRNNNNNLNNNRFLNNNFNLNNNFNLNNNNNNLNNNLNNNLNNNLFRN', 'NNNNNNLLNRLLNNNNNNNNNLNNFFNNNNNNNLNRRNNNNNNNNRFRRNLNNNNNNNNNNRFNNNNN', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLRRNNNNRNNNNNNNNNNNNNNNNNN', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNFFNNLNNFFNNNNNNNNNNNNNNN', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNRNRNLLNNNNNNNNNNNNNNNN', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLFLNNNRFNNNNNNNNNNNNNNNNN', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFLRLNNNNNNNNNNNNNNNNNN']),
        (3, 44, ['FRRFN', 'NFLNF', 'RFLRL', 'LLRLR', 'FFNFF']),
        (4, 32, ['LLFRFNRFRL', 'NLFRFFNLRN', 'LNNNFLLRNF', 'LRRLLNRFLL', 'LNRNNRNLRN', 'NRLFNRNFLF', 'FFRNRNRLNF']),
        (5, 80, ['FNNLFNFR', 'FNFNRFRN', 'RNFFFLLL', 'LRLLLNFR', 'NNFFFLFF']),
        (6, 40, ['LNLLFLRFLLRRNLNN', 'LNRNFLNFLRNLLLRR', 'LNNLRRRFRNLLLNLN', 'LNNNNNFLNNRFLLRR', 'NRNNFNFRNLLRNFNR', 'FFLFRLLFRRFFLNLN', 'NFNNNNLRNLFLLFNN', 'LRFNNLNFFNNRLLFF', 'FNLNRRFNRLFNRRNF', 'LFLFNLLNNFNNRFNN', 'FFNRFFNLNFLRLRLL', 'FLRRLNLNFFNFNFNN']),
        (7, 10, ['NLRLNFFNLFFNFRNNNNFNFLRRRNRLFLNNFRFFLFRNRFFLNFRNNR', 'FFNFRLFFLRRFFRRLFNLNLRRNFNFNNRRNRRNFNNRLNFRNFNRNFF', 'FRRFNLNFFNNLLRNFLFLFLNRRLNLNFRFRLFNLLRFFRLNNRRRNNR', 'RFFRNFRLNRNLLFLRRFNFLNFLRNRFLFFRNNLNNLNFFNLNNNNFFR', 'RRFLFLLFLNRFLRNRLRFFRFLLLLRNLLLRFFLLNRLNLRLRFNFNNL', 'FLLLNNRLFFFFNRLFNLFRFLLFFLFLRNFRLLRNFFLNLRFNLLLRLN', 'FLLNFFNNFLRFLRNFFNFLNNLRRLFLNFRLFFFLNNLNRRFFFRFNRF', 'NRLNRLRNRLRFFFLLRLRNLLRFRLFNFRNFRNLRNNRLFFNLNFFNFR', 'FLRFFLLFFNLRNFLRNNFFRFNFNNLFLLLFRFFLNLFRFFFLRFRRRR', 'NLRLLLFRNLLLNFLRLFLLRFRRNLNNLRRFLLLRFLLNLNNLNNLRRF', 'NFLNNLFLRRNLLNFFLLFFLNLNLLNNFFFLRNLFFRRFFLLNFRRNNN', 'FNRRNLLRFNNLRNFFFRNNRNFLNLLRFFRNFRFRNNRRLNLFRRLFNN', 'RRNLRNRRNFNFFNNNNLLRNFNNFLLFNFFFNNFNNNRFFRLRNFFNFL', 'FNRLNFLNNFRFRNFLNNNNRLRRLNLRNLFLLLFFRFFLNRRNNRRFLR', 'RLLLFFRFLNNFNFFNLRFLLNLNRFLNRRNRNNRLFLRFNFRFNNFRLR', 'RLRLRRFRFLRNRNFFNRLNNLNFRRLRFLFLFRRNFNNFRRLRFRLLLR', 'FFFNFLRFRFLFLLRLRLRRLNLLLNRLFLFNRFRFLRFFFNNRRFLLFN', 'FRFFLRNLNNLRNFRRNLNRNLLLFLFNLNFNNRNLLFFNFRNFNLRLLF', 'FLFNLLLNLLNFLRRFLNLFNRNRNFNFFLNLNNLRNNRRRFFRFLRRLL', 'RLFRLLRRRRLLRNRFLFFNLFRRLLRFFRFRRFFRFNNRLRLNLRNNFL', 'FFLFFNRRRFFNNNLRRLNLNNLRRFLFFNFNRRNRRLNLFLNLRRNLLL', 'RRFFNFFLRFLFRLNRNFNLNNRNRLFRLRNFNLRRFNRLLFNRNLFFFN', 'NNFRRRRFLRNRLRRLLNRLNRNFRNRNLRNLFLNNLLFNNNFRFNNFRN', 'NRFFFLRLFRLRLFFNFNRNNFLNNNLNFRNLLFLLNLRLLNRFLFLNNF', 'FLRNNLLRRRNRFRFNRRLFFFRFNLFNNNLLLNNFFRLLLRRLRLLLFR', 'FNLRLNFLRRRLFLRFFLFLFNFFLNFLNLRFNNRRNRLLNFNNLFLNFR', 'RRNRLLRFRLFRFNNFRRRLLRLFLRFLNLLNRNLNRNFNRLFFRRRFNR', 'FLNLLLFLFNRFRRFNRNLLRFLLRLRFNFNNLRLNRNFFRRNLNRLRNL', 'RNFRRNFLRLRRRRRRFNLLFLLNLRLFFLFLFRLFRRRFLLRNLRFFFR', 'NNRFFRRLLLLRNLLLLFNNNRRRFFFNRFLRFLLNLLNRFRNLLNNFFL', 'FRLFNNRLRLFNRLNRNRFFRLRNLLFNFNNRRFLRLFLLNLFFRNRLFN', 'FRRFRRNFFLNLNFRFFRFFRRRFNNNLRNRRFFRFNNRNRRNRRFLNNN', 'RFNRRLRRFRLRLLRFFRNRNNFFRRLFNLLLNNRLRNNNRLFRFRRLLR', 'NLNFRFRNNNLNRNNNLNFLFFNFLFFLNFFNLFFFLNNLNRFRFFNRNF', 'NNNRFNFFRLFNNLLRRNRFRFFFLNNRFRNNNLNLFFFLNRRRFLFFLL', 'NNRFLNLNNLFNLFFLRRRLNLNNNRNRFFNFFFLNFRFLNFLNRLFFNF', 'LFFFLNFRLRRLNNFRNNFFRRRNNNRRFFFRLRRLNNNRNFRNFFNFLF', 'RNLNLRLLFNFRLNFLNNLLNFNFNRLRLLFRNRLLRLRNRRFRNFFRFN', 'LRFNFLRLNRRRLRRNFFRFFRFNNRFLFNLFNLNRFFFFRLRLFNRRRN', 'NNNLFLNRFFRLNRFRNRFFRNNNNNRRLLLFLNFRNRNLFFNLRFLLNF', 'RFFFFFFLFRRFFRLRNRLLRFNLNNLNLNLNFRLLFRFFNRLFRNNNNL', 'RRLRRRLRNRNLLLRNFFNNNLLFLRFNNFRNLNLLFRLNNRRNFLLRRL', 'FFNRFNFFRFNFNNRFLNFNNLFLLFLFRFRRRLNFNNLRRFFLRLFNNN', 'RRRFFFRFRRNLFRLNNRNFFLLFFFLNLRLRNRNRRNRFLNRLRFNLFR', 'NFFRFFRNRRNLNLLRNLNFNFRLNFFRFLFRFFFFRRLFLFRNNFFLNN', 'NFLFNNRNNFNFFRLNLFRLNNFFRLLFLNRFFRNNRRRLFNLRRFFNLF', 'RFNLNLRNFLFRFNNLNLRRLRNNRFLFNLLRFFRFLFFNRFNNNLLFNR', 'FLFRLFRRFNFFRNFRLRFRRFRLLLNRRNRFNNFLLLNNLFRFNRFFFL', 'LFRLFLFRFRLNFRNFRRRNNNNRLLLNNRNLRNNNLRFFNRFRRRNRLR', 'FRFFFLLRLLNLRRRNRRFFFFNNNFNRNRFNFRNNFRNNRNLLFRFRRL', 'NFLRFFNFNRLFFNLNFRRFLFLNRNNNLNFFLFNRNRFNFFLFFNNFFL', 'FFNNFNLRRRFFFFFNLRFFRFRNFLRNNNRLRNNLLFRLNFRFRLLNNR', 'NFFFLRLRNLFRLLLRNRLLRRFFFLNLNLFLFFFLRRLRFNLLLNFRRL', 'NFLRNNFLFFNRNFLRNRRFFRRRFRFLFNLFLNNRRRLLRLRRFNRNLR', 'RLFLFNNRRNLFFRNLLNRFRFFNFNFNLLRNNRFRRFLLLRNFNLLLFF', 'RNRLLNNLRLRNRRFNRNFLNRFRLNNRFFLRFFLFNRFLRNLLNRRNFF', 'FFRNNRNFNRFNNFNRNLRFLRNLRNFLNRLNNRLNLRFRRLRNFFRNFL', 'FNFNNRLFFFLFFFRRNRRFLRLRNRFRFFRNNLRRLFLNLRRRNNNFNF', 'RFFLNFNLNNLLRRRNRLFLLRRRNRLRRFLNRFNRLRRNFNRNFFLRLL', 'NFLFRLNFNNRLFNRFLLRLRRNRNLLNLFNFRRNLRLRFNRFFLFFNNN', 'LNFRFFLNFLRFFRLLRNRFFFRNLNFNRFNFRNFLFRRNRRNRLRLRNR', 'NNLNNRRRLNFNRRNLNFFRLLFFFNNLNRLFFRRLNNFNFRFLFRRFNR', 'RFNFRLFFLNLNLFRLLRRRNRLLRRNRNNRLRLRLNRLLLRRNNFLFNL', 'NRFFNLRLLLRLLFNNLFNNNNLFFRRLNLNLFRRLRRRNLLLLNFNFRL', 'FLRLFRFLNLFFLNLLFNRRRLFRRLNLFLFLFLFNNLNFFRFRFFRLNN', 'FRNRFFNRLFFLNNNRRLFFRRFRFLFFFLRNRLRNNRLLFFNRFFNNFL', 'LLFRNLLFFRLLRLLRNRNNFFLFNNFLNRLRLLFLFNLRNRFRNNRNRN', 'RFNFFLNFFRRRRRLFFLNNFRFNNNLNLLLRNNNLFFLLLNRRLLLRRR', 'NRLLRFFRRRRLRNFNLNNLLFFNFNNNNFFRNFFNFNFFRLRFNLRNRF', 'RLNLRFLNRNLLLLRRRLRLLNRFRNFFRLRLNLRRNNFLNFLNRFLNNN', 'RNFFNLRRNRFNFLLLNLRFLNLRLRNFLNLNRRRFNNLLLRRRFFRRRF', 'RNRLLFRFFLLRRRFLRFLRFNRNFRRFFNFNFRFFLFNLLLNRLNLFLL', 'NNNLNNLNFNFFLRNFNRFNRFFFNLFLLNFNNNLFNLLLNRRLFNRRLR', 'RRNRNFRNFNRLFNFLLRRRNNRNNNFNLRRFNFNLNLLNNLLFNNRFRR', 'FFNLLLFRFNLRRLFNRNRLRFLRRRFLFLRLLFFRFNRFRLFRNFRRNF', 'FRNFRRLNNLLRFNFNFLFRNNFRLNLRLRLLLNFRLFLLRNLLRFNLRL', 'LFLLNRLFFRLRLLLFRFNNNLFFFLRFFLFNFNNFNLFFFRRLLNRLLF']),
        (8, 220, ['LFN', 'RLL']),
        (9, 100, ['NNRNFNNN', 'NFRNNLLN', 'RFFNNLLN', 'RFRFRNLL', 'FLRLFNRF', 'NLLNRFNF', 'NRNRFFNN', 'NNNLRLNN']),
        (10, 60, ['FNLLFFLLNNLNRNFFNRN', 'NLRLNRFLRLLNNLRFNNL', 'RRLNRFFLFLNFNNLLRNL', 'LLLRNLRFRRLNFNFFFFR', 'RNLNRLFRNFNFNNLNFNF', 'RNFRNRLRNNRFLNNLFRN', 'NLLNFLNRRFNNRRRRRLN', 'NLFRFRNLLNRNNFRRRNN', 'LRFNNFFRFRNRLFRFNLF', 'LRLFRNRRFLFRNNRFLRL']),
    )
    @unpack
    def test_data(self, test, tile_size, expected):
        return self.do_test(test, tile_size, expected)

    ######################### SECRET TESTS START HERE! #########################


if __name__ == '__main__':
    Test.main()


