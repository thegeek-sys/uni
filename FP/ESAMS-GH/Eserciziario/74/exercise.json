{
    "id": 74,
    "description": "Dati un'mmagine Png, le coordinate di un punto, uno spessore, una lista di colori e un path ad un'altra immagine Png, la funzione disegna sopra l'immagine Png una serie di anelli, con centro le ccordinate del punto in input, salva poi l'immagine nel secondo file Png, ritorna la lista col numero di pixel colorati per ciascun colore.",
    "text": "Si definisca la funzione  es9(filePng, centro, spessore, colori, pngFileOut) che,\n    data una immagine png, ci disegna sopra una serie di anelli colorati e salva l'immagine in un secondo file PNG.\n    La funzione torna una lista contenente il numero di pixel colorati di ciascun colore, nell'ordine.\n    Nota:   per evitare errori da arrotondamento non calcolate la distanza di un pixel dal centro con la radice quadrata\n            ma confrontate la somma del quadrato dei cateti con il quadrato del raggio del cerchio corrente (insomma usate Pitagora)\n    Nota:   per ciascun anello\n            i pixel sul bordo interno devono essere compresi      ( usate il confronto >= )\n            mentre quelli sul bordo esterno devono essere esclusi ( usate il confronto <  )\n    :param filePng:     percorso del file PNG contenente l'immagine da modificare\n    :param centro:      coppia (x, y) che indica le coordinate del centro del bersaglio\n    :param spessore:    spessore degli anelli\n    :param colori:      lista di colori da applicare in ordine dal centro fino all'anello piu' esterno\n    :return:            lista col numero di pixel colorati di ciascun colore\n",
    "algorithm": "Definiamo una nuova funzione drawAnello(img, centro, rIn, rOut, colore):\n\tla funzione disegna nell'immagine img un anello con raggio esterno rOut e raggio interno rIn del colore passato in input, con centro le coordinate in input\n\tinizializza count a 0\n\tsalva in h e w le grandezze dell'immagine\n\tper evitare di sbordare dall'immagine calcolo 4 variabili\n\tminx = massimo tra coordinate x del centro meno rOut e 0 (se il numero è negativo sto uscendo dall'immagine, e quindi minx sarà 0)\n\tminy = massimo tra coordinate y del centro meno rOut e 0\n\tmaxx = minimo tra coordinate x del centro meno rOut e w (impedisce di disegnare l'anello fuori dall'immagine a destra)\n\tmaxy = minimo tra coordinate y del centro meno rOut e h\n\tavendo le 4 coordinate posso scandire solo la zona dell'anello, invece che tutta l'immagine\n\tper x che va da minx a maxx:\n\t\tper y che va da min y a maxy:\n\t\t\tcalcolo la distanza al quadrato dal centro del pixel((x-centroX)**2+(y-centroY)**2)\n\t\t\tse compresa tra rIn**2 e rOut**2:\n\t\t\t\tcoloro il pixel di img\n\t\t\t\tincremento count\n\tritorno count\n\n\nes74(..)\n\tcarica l'immagine in img\n\tinizializza una lista conti vuota\n\tper ogni colore della lista colori:\n\t\tcalcolo il raggioIn (indice del colore * spessore)\n\t\tcalcolo il raggioOut ((indice del colore +1)*spessore)\n\t\taggiungi a conti il risultato della chiamata a drawAnello(..)\n\tsalva l'immagine\n\tritorna conti",
    "tags": ["Immagini", "Matrici"],
    "effort": 6,
    "clues": [],
    "from": "esame-15-2-18"
}